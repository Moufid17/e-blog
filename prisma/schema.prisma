datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model User {
  id                        String    @id @default(cuid())
  name                      String?
  email                     String?   @unique  
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts     Post[]
  likedPosts    PostLikes[]

  role               String   @default("75")
  jobName            String?
  socialBio          String?
  socialLinkedin     String?
  socialGithub       String?
  socialTwitter      String?
  socialWebsite      String?
  socialInstagram    String?
  socialFacebook     String?
  socialYoutube      String?
  socialTwitch       String?
  socialDiscord      String?
  location           String?
  type               String   @default("basic")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id     String  @id @default(cuid()) @unique
  title  String 
  slug   String  @unique @default("")
  description String   
  userId String
  owner User @relation(fields: [userId], references: [id])
  likes       PostLikes[]

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  isPublished Boolean @default(false)
  // publishedAt DateTime?
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
}

model PostLikes {
  postId String
  userId String
  post   Post @relation(fields: [postId], references: [id])
  user   User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  @@id([postId, userId])
}

model Category {
  id     String  @id @default(cuid())
  name   String  @unique
  color  String
  posts  Post[]
}
